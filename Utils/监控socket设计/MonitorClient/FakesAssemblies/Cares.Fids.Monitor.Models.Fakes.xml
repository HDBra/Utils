<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cares.Fids.Monitor.Models.Fakes</name>
    </assembly>
    <members>
        <member name="T:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer">
            <summary>Cares.Fids.Monitor.Models.Model.Connect.BaseServer 的填充码类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.#ctor(Cares.Fids.Monitor.Models.Model.Connect.BaseServer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.Bind(SuperSocket.SocketBase.IActiveConnector)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.Bind(SuperSocket.SocketBase.IAppServer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.Bind(SuperSocket.SocketBase.ILoggerProvider)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.Bind(SuperSocket.SocketBase.IRemoteCertificateValidator)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.Bind(SuperSocket.SocketBase.ISocketServerAccessor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.Bind(SuperSocket.SocketBase.IStatusInfoSource)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.Bind(SuperSocket.SocketBase.ISystemEndPoint)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.Bind(SuperSocket.SocketBase.IWorkItem)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.Bind(SuperSocket.SocketBase.IWorkItemBase)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.Bind(SuperSocket.SocketBase.IAppServer{Cares.Fids.Monitor.Models.Model.Connect.BaseSession})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.Bind(SuperSocket.SocketBase.IRawDataProcessor{Cares.Fids.Monitor.Models.Model.Connect.BaseSession})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.Bind(SuperSocket.SocketBase.IRequestHandler{SuperSocket.SocketBase.Protocol.StringRequestInfo})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.Bind(SuperSocket.SocketBase.IAppServer{Cares.Fids.Monitor.Models.Model.Connect.BaseSession,SuperSocket.SocketBase.Protocol.StringRequestInfo})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.Constructor">
            <summary>设置 BaseServer.BaseServer() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.ConstructorString">
            <summary>设置 BaseServer.BaseServer(String terminator) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.OnStarted">
            <summary>设置 BaseServer.OnStarted() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.OnStopped">
            <summary>设置 BaseServer.OnStopped() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.SetupIRootConfigIServerConfig">
            <summary>设置 BaseServer.Setup(IRootConfig rootConfig, IServerConfig config) 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.AllInstances.OnStarted">
            <summary>设置 BaseServer.OnStarted() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.AllInstances.OnStopped">
            <summary>设置 BaseServer.OnStopped() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseServer.AllInstances.SetupIRootConfigIServerConfig">
            <summary>设置 BaseServer.Setup(IRootConfig rootConfig, IServerConfig config) 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseSession">
            <summary>Cares.Fids.Monitor.Models.Model.Connect.BaseSession 的填充码类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseSession.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseSession.#ctor(Cares.Fids.Monitor.Models.Model.Connect.BaseSession)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseSession.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseSession.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseSession.Bind(SuperSocket.SocketBase.IAppSession)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseSession.Bind(SuperSocket.SocketBase.ISessionBase)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseSession.Bind(SuperSocket.SocketBase.IAppSession{Cares.Fids.Monitor.Models.Model.Connect.BaseSession,SuperSocket.SocketBase.Protocol.StringRequestInfo})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseSession.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseSession.Constructor">
            <summary>设置 BaseSession.BaseSession() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseSession.HandleExceptionException">
            <summary>设置 BaseSession.HandleException(Exception e) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseSession.OnSessionClosedCloseReason">
            <summary>设置 BaseSession.OnSessionClosed(CloseReason reason) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseSession.OnSessionStarted">
            <summary>设置 BaseSession.OnSessionStarted() 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseSession.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseSession.AllInstances.HandleExceptionException">
            <summary>设置 BaseSession.HandleException(Exception e) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseSession.AllInstances.OnSessionClosedCloseReason">
            <summary>设置 BaseSession.OnSessionClosed(CloseReason reason) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimBaseSession.AllInstances.OnSessionStarted">
            <summary>设置 BaseSession.OnSessionStarted() 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer">
            <summary>Cares.Fids.Monitor.Models.Model.Connect.ClientServer 的填充码类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.#ctor(Cares.Fids.Monitor.Models.Model.Connect.ClientServer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.Bind(SuperSocket.SocketBase.IActiveConnector)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.Bind(SuperSocket.SocketBase.IAppServer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.Bind(SuperSocket.SocketBase.ILoggerProvider)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.Bind(SuperSocket.SocketBase.IRemoteCertificateValidator)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.Bind(SuperSocket.SocketBase.ISocketServerAccessor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.Bind(SuperSocket.SocketBase.IStatusInfoSource)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.Bind(SuperSocket.SocketBase.ISystemEndPoint)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.Bind(SuperSocket.SocketBase.IWorkItem)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.Bind(SuperSocket.SocketBase.IWorkItemBase)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.Bind(SuperSocket.SocketBase.IAppServer{Cares.Fids.Monitor.Models.Model.Connect.BaseSession})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.Bind(SuperSocket.SocketBase.IRawDataProcessor{Cares.Fids.Monitor.Models.Model.Connect.BaseSession})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.Bind(SuperSocket.SocketBase.IRequestHandler{SuperSocket.SocketBase.Protocol.StringRequestInfo})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.Bind(SuperSocket.SocketBase.IAppServer{Cares.Fids.Monitor.Models.Model.Connect.BaseSession,SuperSocket.SocketBase.Protocol.StringRequestInfo})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.Constructor">
            <summary>设置 ClientServer.ClientServer() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.ConstructorString">
            <summary>设置 ClientServer.ClientServer(String terminator) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.OnNewSessionConnectedBaseSession">
            <summary>设置 ClientServer.OnNewSessionConnected(BaseSession session) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.OnStarted">
            <summary>设置 ClientServer.OnStarted() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.OnStopped">
            <summary>设置 ClientServer.OnStopped() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.SetupIRootConfigIServerConfig">
            <summary>设置 ClientServer.Setup(IRootConfig rootConfig, IServerConfig config) 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.AllInstances.OnNewSessionConnectedBaseSession">
            <summary>设置 ClientServer.OnNewSessionConnected(BaseSession session) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.AllInstances.OnStarted">
            <summary>设置 ClientServer.OnStarted() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.AllInstances.OnStopped">
            <summary>设置 ClientServer.OnStopped() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientServer.AllInstances.SetupIRootConfigIServerConfig">
            <summary>设置 ClientServer.Setup(IRootConfig rootConfig, IServerConfig config) 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientSession">
            <summary>Cares.Fids.Monitor.Models.Model.Connect.ClientSession 的填充码类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientSession.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientSession.#ctor(Cares.Fids.Monitor.Models.Model.Connect.ClientSession)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientSession.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientSession.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientSession.Bind(SuperSocket.SocketBase.IAppSession)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientSession.Bind(SuperSocket.SocketBase.ISessionBase)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientSession.Bind(SuperSocket.SocketBase.IAppSession{Cares.Fids.Monitor.Models.Model.Connect.ClientSession,SuperSocket.SocketBase.Protocol.StringRequestInfo})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientSession.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientSession.Constructor">
            <summary>设置 ClientSession.ClientSession() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientSession.HandleExceptionException">
            <summary>设置 ClientSession.HandleException(Exception e) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientSession.OnSessionClosedCloseReason">
            <summary>设置 ClientSession.OnSessionClosed(CloseReason reason) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientSession.OnSessionStarted">
            <summary>设置 ClientSession.OnSessionStarted() 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientSession.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientSession.AllInstances.HandleExceptionException">
            <summary>设置 ClientSession.HandleException(Exception e) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientSession.AllInstances.OnSessionClosedCloseReason">
            <summary>设置 ClientSession.OnSessionClosed(CloseReason reason) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.ShimClientSession.AllInstances.OnSessionStarted">
            <summary>设置 ClientSession.OnSessionStarted() 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession">
            <summary>Cares.Fids.Monitor.Models.Model.Connect.BaseSession 的存根类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.Close">
            <summary>设置 AppSession`2.Close() 的 存根</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.Close(SuperSocket.SocketBase.CloseReason)">
            <summary>设置 AppSession`2.Close(CloseReason reason) 的 存根</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.Close01">
            <summary>设置 AppSession`2.Close() 的 stub</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.CloseCloseReason">
            <summary>设置 AppSession`2.Close(CloseReason reason) 的 stub</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.HandleException(System.Exception)">
            <summary>设置 BaseSession.HandleException(Exception e) 的 存根</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.HandleExceptionException">
            <summary>设置 BaseSession.HandleException(Exception e) 的 stub</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.HandleUnknownRequest(SuperSocket.SocketBase.Protocol.StringRequestInfo)">
            <summary>设置 AppSession`1.HandleUnknownRequest(StringRequestInfo requestInfo) 的 存根</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.HandleUnknownRequestStringRequestInfo">
            <summary>设置 AppSession`1.HandleUnknownRequest(StringRequestInfo requestInfo) 的 stub</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.Initialize(SuperSocket.SocketBase.IAppServer{Cares.Fids.Monitor.Models.Model.Connect.BaseSession,SuperSocket.SocketBase.Protocol.StringRequestInfo},SuperSocket.SocketBase.ISocketSession)">
            <summary>设置 AppSession`2.Initialize(IAppServer`2&lt;!0,!1&gt; appServer, ISocketSession socketSession) 的 存根</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.InitializeIAppServerOfBaseSessionStringRequestInfoISocketSession">
            <summary>设置 AppSession`2.Initialize(IAppServer`2&lt;!0,!1&gt; appServer, ISocketSession socketSession) 的 stub</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.InitializeStub">
            <summary>初始化 type StubBaseSession 的新实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.OnInit">
            <summary>设置 AppSession`2.OnInit() 的 存根</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.OnInit01">
            <summary>设置 AppSession`2.OnInit() 的 stub</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.OnSessionClosed(SuperSocket.SocketBase.CloseReason)">
            <summary>设置 BaseSession.OnSessionClosed(CloseReason reason) 的 存根</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.OnSessionClosedCloseReason">
            <summary>设置 BaseSession.OnSessionClosed(CloseReason reason) 的 stub</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.OnSessionStarted">
            <summary>设置 BaseSession.OnSessionStarted() 的 存根</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.OnSessionStarted01">
            <summary>设置 BaseSession.OnSessionStarted() 的 stub</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.ProcessSendingMessage(System.String)">
            <summary>设置 AppSession`1.ProcessSendingMessage(String rawMessage) 的 存根</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.ProcessSendingMessageString">
            <summary>设置 AppSession`1.ProcessSendingMessage(String rawMessage) 的 stub</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.Send(System.ArraySegment{System.Byte})">
            <summary>设置 AppSession`2.Send(ArraySegment`1&lt;Byte&gt; segment) 的 存根</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.Send(System.String)">
            <summary>设置 AppSession`1.Send(String message) 的 存根</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>设置 AppSession`2.Send(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 存根</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.Send(System.String,System.Object[])">
            <summary>设置 AppSession`1.Send(String message, Object[] paramValues) 的 存根</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 AppSession`2.Send(Byte[] data, Int32 offset, Int32 length) 的 存根</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.SendArraySegmentOfByte">
            <summary>设置 AppSession`2.Send(ArraySegment`1&lt;Byte&gt; segment) 的 stub</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.SendByteArrayInt32Int32">
            <summary>设置 AppSession`2.Send(Byte[] data, Int32 offset, Int32 length) 的 stub</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.SendIListOfArraySegmentOfByte">
            <summary>设置 AppSession`2.Send(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 stub</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.SendString">
            <summary>设置 AppSession`1.Send(String message) 的 stub</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.SendStringObjectArray">
            <summary>设置 AppSession`1.Send(String message, Object[] paramValues) 的 stub</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.TrySend(System.String)">
            <summary>设置 AppSession`2.TrySend(String message) 的 存根</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.TrySend(System.ArraySegment{System.Byte})">
            <summary>设置 AppSession`2.TrySend(ArraySegment`1&lt;Byte&gt; segment) 的 存根</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.TrySend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>设置 AppSession`2.TrySend(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 存根</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.TrySend(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 AppSession`2.TrySend(Byte[] data, Int32 offset, Int32 length) 的 存根</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.TrySendArraySegmentOfByte">
            <summary>设置 AppSession`2.TrySend(ArraySegment`1&lt;Byte&gt; segment) 的 stub</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.TrySendByteArrayInt32Int32">
            <summary>设置 AppSession`2.TrySend(Byte[] data, Int32 offset, Int32 length) 的 stub</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.TrySendIListOfArraySegmentOfByte">
            <summary>设置 AppSession`2.TrySend(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 stub</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.TrySendString">
            <summary>设置 AppSession`2.TrySend(String message) 的 stub</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubBaseSession.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession">
            <summary>Cares.Fids.Monitor.Models.Model.Connect.ClientSession 的存根类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.Close">
            <summary>设置 AppSession`2.Close() 的 存根</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.Close(SuperSocket.SocketBase.CloseReason)">
            <summary>设置 AppSession`2.Close(CloseReason reason) 的 存根</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.Close01">
            <summary>设置 AppSession`2.Close() 的 stub</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.CloseCloseReason">
            <summary>设置 AppSession`2.Close(CloseReason reason) 的 stub</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.HandleException(System.Exception)">
            <summary>设置 ClientSession.HandleException(Exception e) 的 存根</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.HandleExceptionException">
            <summary>设置 ClientSession.HandleException(Exception e) 的 stub</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.HandleUnknownRequest(SuperSocket.SocketBase.Protocol.StringRequestInfo)">
            <summary>设置 AppSession`1.HandleUnknownRequest(StringRequestInfo requestInfo) 的 存根</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.HandleUnknownRequestStringRequestInfo">
            <summary>设置 AppSession`1.HandleUnknownRequest(StringRequestInfo requestInfo) 的 stub</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.Initialize(SuperSocket.SocketBase.IAppServer{Cares.Fids.Monitor.Models.Model.Connect.ClientSession,SuperSocket.SocketBase.Protocol.StringRequestInfo},SuperSocket.SocketBase.ISocketSession)">
            <summary>设置 AppSession`2.Initialize(IAppServer`2&lt;!0,!1&gt; appServer, ISocketSession socketSession) 的 存根</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.InitializeIAppServerOfClientSessionStringRequestInfoISocketSession">
            <summary>设置 AppSession`2.Initialize(IAppServer`2&lt;!0,!1&gt; appServer, ISocketSession socketSession) 的 stub</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.InitializeStub">
            <summary>初始化 type StubClientSession 的新实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.OnInit">
            <summary>设置 AppSession`2.OnInit() 的 存根</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.OnInit01">
            <summary>设置 AppSession`2.OnInit() 的 stub</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.OnSessionClosed(SuperSocket.SocketBase.CloseReason)">
            <summary>设置 ClientSession.OnSessionClosed(CloseReason reason) 的 存根</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.OnSessionClosedCloseReason">
            <summary>设置 ClientSession.OnSessionClosed(CloseReason reason) 的 stub</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.OnSessionStarted">
            <summary>设置 ClientSession.OnSessionStarted() 的 存根</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.OnSessionStarted01">
            <summary>设置 ClientSession.OnSessionStarted() 的 stub</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.ProcessSendingMessage(System.String)">
            <summary>设置 AppSession`1.ProcessSendingMessage(String rawMessage) 的 存根</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.ProcessSendingMessageString">
            <summary>设置 AppSession`1.ProcessSendingMessage(String rawMessage) 的 stub</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.Send(System.ArraySegment{System.Byte})">
            <summary>设置 AppSession`2.Send(ArraySegment`1&lt;Byte&gt; segment) 的 存根</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.Send(System.String)">
            <summary>设置 AppSession`1.Send(String message) 的 存根</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>设置 AppSession`2.Send(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 存根</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.Send(System.String,System.Object[])">
            <summary>设置 AppSession`1.Send(String message, Object[] paramValues) 的 存根</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 AppSession`2.Send(Byte[] data, Int32 offset, Int32 length) 的 存根</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.SendArraySegmentOfByte">
            <summary>设置 AppSession`2.Send(ArraySegment`1&lt;Byte&gt; segment) 的 stub</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.SendByteArrayInt32Int32">
            <summary>设置 AppSession`2.Send(Byte[] data, Int32 offset, Int32 length) 的 stub</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.SendIListOfArraySegmentOfByte">
            <summary>设置 AppSession`2.Send(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 stub</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.SendString">
            <summary>设置 AppSession`1.Send(String message) 的 stub</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.SendStringObjectArray">
            <summary>设置 AppSession`1.Send(String message, Object[] paramValues) 的 stub</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.TrySend(System.String)">
            <summary>设置 AppSession`2.TrySend(String message) 的 存根</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.TrySend(System.ArraySegment{System.Byte})">
            <summary>设置 AppSession`2.TrySend(ArraySegment`1&lt;Byte&gt; segment) 的 存根</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.TrySend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>设置 AppSession`2.TrySend(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 存根</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.TrySend(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 AppSession`2.TrySend(Byte[] data, Int32 offset, Int32 length) 的 存根</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.TrySendArraySegmentOfByte">
            <summary>设置 AppSession`2.TrySend(ArraySegment`1&lt;Byte&gt; segment) 的 stub</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.TrySendByteArrayInt32Int32">
            <summary>设置 AppSession`2.TrySend(Byte[] data, Int32 offset, Int32 length) 的 stub</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.TrySendIListOfArraySegmentOfByte">
            <summary>设置 AppSession`2.TrySend(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 stub</summary>
        </member>
        <member name="F:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.TrySendString">
            <summary>设置 AppSession`2.TrySend(String message) 的 stub</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Connect.Fakes.StubClientSession.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Fakes.ShimConstants">
            <summary>Cares.Fids.Monitor.Models.Model.Constants 的填充码类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Fakes.ShimConstants.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Fakes.ShimConstants.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Fakes.ShimConstants.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Fakes.ShimConstants.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Fakes.ShimLocalConfig">
            <summary>Cares.Fids.Monitor.Models.Model.LocalConfig 的填充码类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Fakes.ShimLocalConfig.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Fakes.ShimLocalConfig.#ctor(Cares.Fids.Monitor.Models.Model.LocalConfig)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Fakes.ShimLocalConfig.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Fakes.ShimLocalConfig.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Fakes.ShimLocalConfig.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Fakes.ShimLocalConfig.Constructor">
            <summary>设置 LocalConfig.LocalConfig() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Fakes.ShimLocalConfig.ReceiveTimeoutGet">
            <summary>设置 LocalConfig.get_ReceiveTimeout() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Fakes.ShimLocalConfig.ReceiveTimeoutSetInt32">
            <summary>设置 LocalConfig.set_ReceiveTimeout(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Fakes.ShimLocalConfig.SendTimeoutGet">
            <summary>设置 LocalConfig.get_SendTimeout() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Fakes.ShimLocalConfig.SendTimeoutSetInt32">
            <summary>设置 LocalConfig.set_SendTimeout(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Fakes.ShimLocalConfig.StaticConstructor">
            <summary>设置 LocalConfig.LocalConfig() 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Fakes.ShimLocalConfig.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Fakes.ShimLocalConfig.AllInstances.ReceiveTimeoutGet">
            <summary>设置 LocalConfig.get_ReceiveTimeout() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Fakes.ShimLocalConfig.AllInstances.ReceiveTimeoutSetInt32">
            <summary>设置 LocalConfig.set_ReceiveTimeout(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Fakes.ShimLocalConfig.AllInstances.SendTimeoutGet">
            <summary>设置 LocalConfig.get_SendTimeout() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Fakes.ShimLocalConfig.AllInstances.SendTimeoutSetInt32">
            <summary>设置 LocalConfig.set_SendTimeout(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Fakes.StubLocalConfig">
            <summary>Cares.Fids.Monitor.Models.Model.LocalConfig 的存根类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Fakes.StubLocalConfig.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Fakes.StubLocalConfig.InitializeStub">
            <summary>初始化 type StubLocalConfig 的新实例</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Fakes.StubLocalConfig.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Fakes.StubLocalConfig.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Fakes.StubLocalConfig.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimCpuStatus">
            <summary>Cares.Fids.Monitor.Models.Model.Protocol.CpuStatus 的填充码类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimCpuStatus.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimCpuStatus.#ctor(Cares.Fids.Monitor.Models.Model.Protocol.CpuStatus)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimCpuStatus.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimCpuStatus.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimCpuStatus.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimCpuStatus.Constructor">
            <summary>设置 CpuStatus.CpuStatus() 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimCpuStatus.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimDriverStatus">
            <summary>Cares.Fids.Monitor.Models.Model.Protocol.DriverStatus 的填充码类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimDriverStatus.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimDriverStatus.#ctor(Cares.Fids.Monitor.Models.Model.Protocol.DriverStatus)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimDriverStatus.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimDriverStatus.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimDriverStatus.AllStorageGet">
            <summary>设置 DriverStatus.get_AllStorage() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimDriverStatus.AllStorageSetInt64">
            <summary>设置 DriverStatus.set_AllStorage(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimDriverStatus.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimDriverStatus.Constructor">
            <summary>设置 DriverStatus.DriverStatus() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimDriverStatus.DriverNameGet">
            <summary>设置 DriverStatus.get_DriverName() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimDriverStatus.DriverNameSetString">
            <summary>设置 DriverStatus.set_DriverName(String value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimDriverStatus.UsedStorageGet">
            <summary>设置 DriverStatus.get_UsedStorage() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimDriverStatus.UsedStorageSetInt64">
            <summary>设置 DriverStatus.set_UsedStorage(Int64 value) 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimDriverStatus.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimDriverStatus.AllInstances.AllStorageGet">
            <summary>设置 DriverStatus.get_AllStorage() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimDriverStatus.AllInstances.AllStorageSetInt64">
            <summary>设置 DriverStatus.set_AllStorage(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimDriverStatus.AllInstances.DriverNameGet">
            <summary>设置 DriverStatus.get_DriverName() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimDriverStatus.AllInstances.DriverNameSetString">
            <summary>设置 DriverStatus.set_DriverName(String value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimDriverStatus.AllInstances.UsedStorageGet">
            <summary>设置 DriverStatus.get_UsedStorage() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimDriverStatus.AllInstances.UsedStorageSetInt64">
            <summary>设置 DriverStatus.set_UsedStorage(Int64 value) 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimMemoryStatus">
            <summary>Cares.Fids.Monitor.Models.Model.Protocol.MemoryStatus 的填充码类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimMemoryStatus.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimMemoryStatus.#ctor(Cares.Fids.Monitor.Models.Model.Protocol.MemoryStatus)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimMemoryStatus.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimMemoryStatus.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimMemoryStatus.AllMemoryGet">
            <summary>设置 MemoryStatus.get_AllMemory() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimMemoryStatus.AllMemorySetInt64">
            <summary>设置 MemoryStatus.set_AllMemory(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimMemoryStatus.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimMemoryStatus.Constructor">
            <summary>设置 MemoryStatus.MemoryStatus() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimMemoryStatus.UsedMemoryGet">
            <summary>设置 MemoryStatus.get_UsedMemory() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimMemoryStatus.UsedMemorySetInt64">
            <summary>设置 MemoryStatus.set_UsedMemory(Int64 value) 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimMemoryStatus.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimMemoryStatus.AllInstances.AllMemoryGet">
            <summary>设置 MemoryStatus.get_AllMemory() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimMemoryStatus.AllInstances.AllMemorySetInt64">
            <summary>设置 MemoryStatus.set_AllMemory(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimMemoryStatus.AllInstances.UsedMemoryGet">
            <summary>设置 MemoryStatus.get_UsedMemory() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimMemoryStatus.AllInstances.UsedMemorySetInt64">
            <summary>设置 MemoryStatus.set_UsedMemory(Int64 value) 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimRequest">
            <summary>Cares.Fids.Monitor.Models.Model.Protocol.Request 的填充码类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimRequest.#ctor(Cares.Fids.Monitor.Models.Model.Protocol.Request)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimRequest.Constructor">
            <summary>设置 Request.Request() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimRequest.RequestContentGet">
            <summary>设置 Request.get_RequestContent() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimRequest.RequestContentSetInt32">
            <summary>设置 Request.set_RequestContent(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimRequest.RequestIdGet">
            <summary>设置 Request.get_RequestId() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimRequest.RequestIdSetGuid">
            <summary>设置 Request.set_RequestId(Guid value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimRequest.RequestTimeGet">
            <summary>设置 Request.get_RequestTime() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimRequest.RequestTimeSetDateTime">
            <summary>设置 Request.set_RequestTime(DateTime value) 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimRequest.AllInstances.RequestContentGet">
            <summary>设置 Request.get_RequestContent() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimRequest.AllInstances.RequestContentSetInt32">
            <summary>设置 Request.set_RequestContent(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimRequest.AllInstances.RequestIdGet">
            <summary>设置 Request.get_RequestId() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimRequest.AllInstances.RequestIdSetGuid">
            <summary>设置 Request.set_RequestId(Guid value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimRequest.AllInstances.RequestTimeGet">
            <summary>设置 Request.get_RequestTime() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimRequest.AllInstances.RequestTimeSetDateTime">
            <summary>设置 Request.set_RequestTime(DateTime value) 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse">
            <summary>Cares.Fids.Monitor.Models.Model.Protocol.Response 的填充码类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.#ctor(Cares.Fids.Monitor.Models.Model.Protocol.Response)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.Constructor">
            <summary>设置 Response.Response() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.CpuInfoGet">
            <summary>设置 Response.get_CpuInfo() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.CpuInfoSetCpuStatus">
            <summary>设置 Response.set_CpuInfo(CpuStatus value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.DriverInfoGet">
            <summary>设置 Response.get_DriverInfo() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.DriverInfoSetListOfDriverStatus">
            <summary>设置 Response.set_DriverInfo(List`1&lt;DriverStatus&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.IsValidGet">
            <summary>设置 Response.get_IsValid() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.IsValidSetBoolean">
            <summary>设置 Response.set_IsValid(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.MemoryInfoGet">
            <summary>设置 Response.get_MemoryInfo() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.MemoryInfoSetMemoryStatus">
            <summary>设置 Response.set_MemoryInfo(MemoryStatus value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.ResponseCodeGet">
            <summary>设置 Response.get_ResponseCode() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.ResponseCodeSetInt32">
            <summary>设置 Response.set_ResponseCode(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.ResponseIdGet">
            <summary>设置 Response.get_ResponseId() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.ResponseIdSetGuid">
            <summary>设置 Response.set_ResponseId(Guid value) 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.AllInstances.CpuInfoGet">
            <summary>设置 Response.get_CpuInfo() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.AllInstances.CpuInfoSetCpuStatus">
            <summary>设置 Response.set_CpuInfo(CpuStatus value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.AllInstances.DriverInfoGet">
            <summary>设置 Response.get_DriverInfo() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.AllInstances.DriverInfoSetListOfDriverStatus">
            <summary>设置 Response.set_DriverInfo(List`1&lt;DriverStatus&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.AllInstances.IsValidGet">
            <summary>设置 Response.get_IsValid() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.AllInstances.IsValidSetBoolean">
            <summary>设置 Response.set_IsValid(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.AllInstances.MemoryInfoGet">
            <summary>设置 Response.get_MemoryInfo() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.AllInstances.MemoryInfoSetMemoryStatus">
            <summary>设置 Response.set_MemoryInfo(MemoryStatus value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.AllInstances.ResponseCodeGet">
            <summary>设置 Response.get_ResponseCode() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.AllInstances.ResponseCodeSetInt32">
            <summary>设置 Response.set_ResponseCode(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.AllInstances.ResponseIdGet">
            <summary>设置 Response.get_ResponseId() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimResponse.AllInstances.ResponseIdSetGuid">
            <summary>设置 Response.set_ResponseId(Guid value) 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebRequest">
            <summary>Cares.Fids.Monitor.Models.Model.Protocol.WebRequest 的填充码类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebRequest.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebRequest.#ctor(Cares.Fids.Monitor.Models.Model.Protocol.WebRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebRequest.Constructor">
            <summary>设置 WebRequest.WebRequest() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebRequest.RequestListGet">
            <summary>设置 WebRequest.get_RequestList() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebRequest.RequestListSetListOfGuid">
            <summary>设置 WebRequest.set_RequestList(List`1&lt;Guid&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebRequest.RequestTypeGet">
            <summary>设置 WebRequest.get_RequestType() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebRequest.RequestTypeSetRequestType">
            <summary>设置 WebRequest.set_RequestType(RequestType value) 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebRequest.AllInstances.RequestListGet">
            <summary>设置 WebRequest.get_RequestList() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebRequest.AllInstances.RequestListSetListOfGuid">
            <summary>设置 WebRequest.set_RequestList(List`1&lt;Guid&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebRequest.AllInstances.RequestTypeGet">
            <summary>设置 WebRequest.get_RequestType() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebRequest.AllInstances.RequestTypeSetRequestType">
            <summary>设置 WebRequest.set_RequestType(RequestType value) 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponse">
            <summary>Cares.Fids.Monitor.Models.Model.Protocol.WebResponse 的填充码类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponse.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponse.#ctor(Cares.Fids.Monitor.Models.Model.Protocol.WebResponse)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponse.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponse.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponse.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponse.Constructor">
            <summary>设置 WebResponse.WebResponse() 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponse.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem">
            <summary>Cares.Fids.Monitor.Models.Model.Protocol.WebResponseItem 的填充码类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.#ctor(Cares.Fids.Monitor.Models.Model.Protocol.WebResponseItem)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.Constructor">
            <summary>设置 WebResponseItem.WebResponseItem() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.CpuInfoGet">
            <summary>设置 WebResponseItem.get_CpuInfo() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.CpuInfoSetCpuStatus">
            <summary>设置 WebResponseItem.set_CpuInfo(CpuStatus value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.DeviceIdGet">
            <summary>设置 WebResponseItem.get_DeviceId() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.DeviceIdSetGuid">
            <summary>设置 WebResponseItem.set_DeviceId(Guid value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.DriverInfoGet">
            <summary>设置 WebResponseItem.get_DriverInfo() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.DriverInfoSetListOfDriverStatus">
            <summary>设置 WebResponseItem.set_DriverInfo(List`1&lt;DriverStatus&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.IsValidGet">
            <summary>设置 WebResponseItem.get_IsValid() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.IsValidSetBoolean">
            <summary>设置 WebResponseItem.set_IsValid(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.MemoryInfoGet">
            <summary>设置 WebResponseItem.get_MemoryInfo() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.MemoryInfoSetMemoryStatus">
            <summary>设置 WebResponseItem.set_MemoryInfo(MemoryStatus value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.ResponseCodeGet">
            <summary>设置 WebResponseItem.get_ResponseCode() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.ResponseCodeSetInt32">
            <summary>设置 WebResponseItem.set_ResponseCode(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.AllInstances.CpuInfoGet">
            <summary>设置 WebResponseItem.get_CpuInfo() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.AllInstances.CpuInfoSetCpuStatus">
            <summary>设置 WebResponseItem.set_CpuInfo(CpuStatus value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.AllInstances.DeviceIdGet">
            <summary>设置 WebResponseItem.get_DeviceId() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.AllInstances.DeviceIdSetGuid">
            <summary>设置 WebResponseItem.set_DeviceId(Guid value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.AllInstances.DriverInfoGet">
            <summary>设置 WebResponseItem.get_DriverInfo() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.AllInstances.DriverInfoSetListOfDriverStatus">
            <summary>设置 WebResponseItem.set_DriverInfo(List`1&lt;DriverStatus&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.AllInstances.IsValidGet">
            <summary>设置 WebResponseItem.get_IsValid() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.AllInstances.IsValidSetBoolean">
            <summary>设置 WebResponseItem.set_IsValid(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.AllInstances.MemoryInfoGet">
            <summary>设置 WebResponseItem.get_MemoryInfo() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.AllInstances.MemoryInfoSetMemoryStatus">
            <summary>设置 WebResponseItem.set_MemoryInfo(MemoryStatus value) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.AllInstances.ResponseCodeGet">
            <summary>设置 WebResponseItem.get_ResponseCode() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.ShimWebResponseItem.AllInstances.ResponseCodeSetInt32">
            <summary>设置 WebResponseItem.set_ResponseCode(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubCpuStatus">
            <summary>Cares.Fids.Monitor.Models.Model.Protocol.CpuStatus 的存根类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubCpuStatus.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubCpuStatus.InitializeStub">
            <summary>初始化 type StubCpuStatus 的新实例</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubCpuStatus.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubCpuStatus.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubCpuStatus.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubDriverStatus">
            <summary>Cares.Fids.Monitor.Models.Model.Protocol.DriverStatus 的存根类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubDriverStatus.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubDriverStatus.InitializeStub">
            <summary>初始化 type StubDriverStatus 的新实例</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubDriverStatus.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubDriverStatus.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubDriverStatus.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubMemoryStatus">
            <summary>Cares.Fids.Monitor.Models.Model.Protocol.MemoryStatus 的存根类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubMemoryStatus.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubMemoryStatus.InitializeStub">
            <summary>初始化 type StubMemoryStatus 的新实例</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubMemoryStatus.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubMemoryStatus.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubMemoryStatus.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubRequest">
            <summary>Cares.Fids.Monitor.Models.Model.Protocol.Request 的存根类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubRequest.InitializeStub">
            <summary>初始化 type StubRequest 的新实例</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubResponse">
            <summary>Cares.Fids.Monitor.Models.Model.Protocol.Response 的存根类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubResponse.InitializeStub">
            <summary>初始化 type StubResponse 的新实例</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubWebRequest">
            <summary>Cares.Fids.Monitor.Models.Model.Protocol.WebRequest 的存根类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubWebRequest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubWebRequest.InitializeStub">
            <summary>初始化 type StubWebRequest 的新实例</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubWebRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubWebRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubWebRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubWebResponse">
            <summary>Cares.Fids.Monitor.Models.Model.Protocol.WebResponse 的存根类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubWebResponse.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubWebResponse.InitializeStub">
            <summary>初始化 type StubWebResponse 的新实例</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubWebResponse.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubWebResponse.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubWebResponse.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubWebResponseItem">
            <summary>Cares.Fids.Monitor.Models.Model.Protocol.WebResponseItem 的存根类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubWebResponseItem.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubWebResponseItem.InitializeStub">
            <summary>初始化 type StubWebResponseItem 的新实例</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubWebResponseItem.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubWebResponseItem.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Model.Protocol.Fakes.StubWebResponseItem.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Utils.Fakes.ShimLogUtils">
            <summary>Cares.Fids.Monitor.Models.Utils.LogUtils 的填充码类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Utils.Fakes.ShimLogUtils.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Utils.Fakes.ShimLogUtils.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Utils.Fakes.ShimLogUtils.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimLogUtils.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimLogUtils.DebugFormatStringObjectArray">
            <summary>设置 LogUtils.DebugFormat(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimLogUtils.DebugString">
            <summary>设置 LogUtils.Debug(String msg) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimLogUtils.DebugStringException">
            <summary>设置 LogUtils.Debug(String msg, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimLogUtils.ErrorFormatStringObjectArray">
            <summary>设置 LogUtils.ErrorFormat(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimLogUtils.ErrorString">
            <summary>设置 LogUtils.Error(String msg) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimLogUtils.ErrorStringException">
            <summary>设置 LogUtils.Error(String msg, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimLogUtils.InfoFormatStringObjectArray">
            <summary>设置 LogUtils.InfoFormat(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimLogUtils.InfoString">
            <summary>设置 LogUtils.Info(String msg) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimLogUtils.InfoStringException">
            <summary>设置 LogUtils.Info(String msg, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimLogUtils.WarnFormatStringObjectArray">
            <summary>设置 LogUtils.WarnFormat(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimLogUtils.WarnString">
            <summary>设置 LogUtils.Warn(String msg) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimLogUtils.WarnStringException">
            <summary>设置 LogUtils.Warn(String msg, Exception exception) 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Utils.Fakes.ShimObjectXmlSerializer">
            <summary>Cares.Fids.Monitor.Models.Utils.ObjectXmlSerializer 的填充码类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Utils.Fakes.ShimObjectXmlSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Utils.Fakes.ShimObjectXmlSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Utils.Fakes.ShimObjectXmlSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Utils.Fakes.ShimObjectXmlSerializer.ToObjectOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>设置 ObjectXmlSerializer.ToObject(String str) 的 填充码</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Utils.Fakes.ShimObjectXmlSerializer.ToXmlOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.String})">
            <summary>设置 ObjectXmlSerializer.ToXml(!!0 obj) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimObjectXmlSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Utils.Fakes.ShimSuperSocketProxy">
            <summary>Cares.Fids.Monitor.Models.Utils.SuperSocketProxy 的填充码类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Utils.Fakes.ShimSuperSocketProxy.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Utils.Fakes.ShimSuperSocketProxy.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Utils.Fakes.ShimSuperSocketProxy.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimSuperSocketProxy.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimSuperSocketProxy.Start">
            <summary>设置 SuperSocketProxy.Start() 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx">
            <summary>Cares.Fids.Monitor.Models.Utils.TcpClientEx 的填充码类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.#ctor(Cares.Fids.Monitor.Models.Utils.TcpClientEx)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.Close">
            <summary>设置 TcpClientEx.Close() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.Connect">
            <summary>设置 TcpClientEx.Connect() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.ConnectSafe">
            <summary>设置 TcpClientEx.ConnectSafe() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.ConstructorStringInt32String">
            <summary>设置 TcpClientEx.TcpClientEx(String ip, Int32 port, String encoding) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.GetTcpClient">
            <summary>设置 TcpClientEx.GetTcpClient() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.IsConnected">
            <summary>设置 TcpClientEx.IsConnected() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.SendSafeString">
            <summary>设置 TcpClientEx.SendSafe(String msg) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.SendString">
            <summary>设置 TcpClientEx.Send(String msg) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.receive">
            <summary>设置 TcpClientEx.receive() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.search">
            <summary>设置 TcpClientEx.search() 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.AllInstances.Close">
            <summary>设置 TcpClientEx.Close() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.AllInstances.Connect">
            <summary>设置 TcpClientEx.Connect() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.AllInstances.ConnectSafe">
            <summary>设置 TcpClientEx.ConnectSafe() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.AllInstances.GetTcpClient">
            <summary>设置 TcpClientEx.GetTcpClient() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.AllInstances.IsConnected">
            <summary>设置 TcpClientEx.IsConnected() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.AllInstances.SendSafeString">
            <summary>设置 TcpClientEx.SendSafe(String msg) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.AllInstances.SendString">
            <summary>设置 TcpClientEx.Send(String msg) 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.AllInstances.receive">
            <summary>设置 TcpClientEx.receive() 的 填充码</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.ShimTcpClientEx.AllInstances.search">
            <summary>设置 TcpClientEx.search() 的 填充码</summary>
        </member>
        <member name="T:Cares.Fids.Monitor.Models.Utils.Fakes.StubTcpClientEx">
            <summary>Cares.Fids.Monitor.Models.Utils.TcpClientEx 的存根类型</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Utils.Fakes.StubTcpClientEx.#ctor(System.String,System.Int32,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Cares.Fids.Monitor.Models.Utils.Fakes.StubTcpClientEx.InitializeStub">
            <summary>初始化 type StubTcpClientEx 的新实例</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.StubTcpClientEx.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.StubTcpClientEx.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Cares.Fids.Monitor.Models.Utils.Fakes.StubTcpClientEx.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
    </members>
</doc>
